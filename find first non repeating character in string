/* * Using HashMap to find first non-repeated character from String in Java. * Algorithm : * Step 1 : Scan String and store count of each character in HashMap * Step 2 : traverse String and get count for each character from Map. * Since we are going through String from first to last character, * when count for any character is 1, we break, it's the first * non repeated character. Here order is achieved by going * through String again. */ 

public static char firstNonRepeatedCharacter(String word) 
{ 
HashMap<Character,Integer> scoreboard = new HashMap<>(); 
// build table [char -> count] 
for (int i = 0; i < word.length(); i++) 
{ 
  char c = word.charAt(i); 
    if (scoreboard.containsKey(c)) 
    { 
    scoreboard.put(c, scoreboard.get(c) + 1); 
    } else 
      { 
        scoreboard.put(c, 1); 
        } 
     } 
 // since HashMap doesn't maintain order, going through string again 
 
 for (int i = 0; i < word.length(); i++) 
 { 
  char c = word.charAt(i); 
  if (scoreboard.get(c) == 1) 
  { 
  return c; 
  }
 } 
 throw new RuntimeException("Undefined behaviour"); 
  } 
 }

//Two other approches also there 
1. Linked hashMap - it will use more time complexity O(2^n)
2. Using combination of List and Set.
